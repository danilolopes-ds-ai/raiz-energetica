import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { Activity, Sparkles, Dna, Hand as HeartHand } from 'lucide-react';

const iconMap = {
  Activity,
  Sparkles,
  Dna,
  HeartHand,
};

export const useServices = () => {
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchServices = async () => {
      try {
        const { data, error } = await supabase
          .from('services')
          .select('*')
          .order('order_index', { ascending: true });

        if (error) {
          throw error;
        }

        const processedData = data.map(service => {
          // Mapeia o √≠cone de string para o componente real
          const iconComponent = iconMap[service.icon] || Activity;
          
          // Atualiza√ß√µes de descri√ß√£o espec√≠ficas
          let updatedDescription = service.description;
          if (service.title === 'Desvendando a Raiz') {
            updatedDescription = 'Mapeie padr√µes ocultos, descubra os bloqueios reais que travam sua vida e receba um plano de a√ß√£o para sua transforma√ß√£o.';
          } else if (service.title === 'Radiestesia Gen√©tica') {
            updatedDescription = 'Acesse o DNA energ√©tico da sua linhagem e trate padr√µes invis√≠veis que silenciosamente moldam sua sa√∫de, seus relacionamentos e sua prosperidade.';
          } else if (service.title === 'Harmonia Geracional') {
            updatedDescription = 'üíû Reduza conflitos, aproxime cora√ß√µes e reestabele√ßa a harmonia entre m√£e e filho(a) sem confronto ou desgaste.';
          }

          return { 
            ...service, 
            icon: iconComponent, 
            description: updatedDescription 
          };
        });

        setServices(processedData);
      } catch (err) {
        setError(err.message);
        console.error("Erro ao buscar servi√ßos do Supabase:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchServices();
  }, []);

  return { services, loading, error };
};
